/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PropertyGroup {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    async propertyGroupList(
        req: operations.PropertyGroupListRequest,
        security: operations.PropertyGroupListSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PropertyGroupListResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PropertyGroupListRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/api/v0.0.1/property_group/";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PropertyGroupListSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PropertyGroupListResponse = new operations.PropertyGroupListResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.paginatedPropertyGroupSerializerListList = utils.objectToClass(
                        httpRes?.data,
                        shared.PaginatedPropertyGroupSerializerListList
                    );
                }
                break;
        }

        return res;
    }

    async propertyGroupRetrieve(
        req: operations.PropertyGroupRetrieveRequest,
        security: operations.PropertyGroupRetrieveSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PropertyGroupRetrieveResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PropertyGroupRetrieveRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/api/v0.0.1/property_group/{id}/", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PropertyGroupRetrieveSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PropertyGroupRetrieveResponse =
            new operations.PropertyGroupRetrieveResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.propertyGroupSerializerDetail = utils.objectToClass(
                        httpRes?.data,
                        shared.PropertyGroupSerializerDetail
                    );
                }
                break;
        }

        return res;
    }
}
