/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Building } from "./building";
import { CheckToken } from "./checktoken";
import { Estimates } from "./estimates";
import { Expenditure } from "./expenditure";
import { Floor } from "./floor";
import { Invoice } from "./invoice";
import { ManagementAgent } from "./managementagent";
import { ManagerFile } from "./managerfile";
import { Meld } from "./meld";
import { Owner } from "./owner";
import { Ping } from "./ping";
import { Project } from "./project";
import { Property } from "./property";
import { PropertyGroup } from "./propertygroup";
import { Resident } from "./resident";
import { ResidentFile } from "./residentfile";
import { Schema } from "./schema";
import { Unit } from "./unit";
import { Vendor } from "./vendor";
import { VendorFile } from "./vendorfile";
import { VendorInvite } from "./vendorinvite";
import { WorkLog } from "./worklog";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * Property Meld Production Application
     */
    "https://app.propertymeld.com/",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    securityClient: AxiosInstance;
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "0.0.1";
    sdkVersion = "1.0.0";
    genVersion = "2.37.2";

    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Property Meld API: An API to access data from your Property Meld Account.
 */
export class MeldAPI {
    public building: Building;
    public checkToken: CheckToken;
    public estimates: Estimates;
    public expenditure: Expenditure;
    public floor: Floor;
    public invoice: Invoice;
    public managementAgent: ManagementAgent;
    public managerFile: ManagerFile;
    public meld: Meld;
    public owner: Owner;
    public ping: Ping;
    public project: Project;
    public property: Property;
    public propertyGroup: PropertyGroup;
    public resident: Resident;
    public residentFile: ResidentFile;
    public schema: Schema;
    public unit: Unit;
    public vendor: Vendor;
    public vendorFile: VendorFile;
    public vendorInvite: VendorInvite;
    public workLog: WorkLog;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create({ baseURL: serverURL });
        const securityClient = defaultClient;

        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            securityClient: securityClient,
            serverURL: serverURL,
        });

        this.building = new Building(this.sdkConfiguration);
        this.checkToken = new CheckToken(this.sdkConfiguration);
        this.estimates = new Estimates(this.sdkConfiguration);
        this.expenditure = new Expenditure(this.sdkConfiguration);
        this.floor = new Floor(this.sdkConfiguration);
        this.invoice = new Invoice(this.sdkConfiguration);
        this.managementAgent = new ManagementAgent(this.sdkConfiguration);
        this.managerFile = new ManagerFile(this.sdkConfiguration);
        this.meld = new Meld(this.sdkConfiguration);
        this.owner = new Owner(this.sdkConfiguration);
        this.ping = new Ping(this.sdkConfiguration);
        this.project = new Project(this.sdkConfiguration);
        this.property = new Property(this.sdkConfiguration);
        this.propertyGroup = new PropertyGroup(this.sdkConfiguration);
        this.resident = new Resident(this.sdkConfiguration);
        this.residentFile = new ResidentFile(this.sdkConfiguration);
        this.schema = new Schema(this.sdkConfiguration);
        this.unit = new Unit(this.sdkConfiguration);
        this.vendor = new Vendor(this.sdkConfiguration);
        this.vendorFile = new VendorFile(this.sdkConfiguration);
        this.vendorInvite = new VendorInvite(this.sdkConfiguration);
        this.workLog = new WorkLog(this.sdkConfiguration);
    }
}
